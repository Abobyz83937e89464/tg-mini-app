// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const ADMIN_ID = 8049083248;
const USER_PASSWORD = "morpa";

// –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å CORS proxy
const DRIVE_FILES = [
    {"name": "boo.wf_100mln_0.csv", "url": "https://corsproxy.io/?https://drive.google.com/uc?export=download&id=1U6C-SqeNWv3ylYujFBTZS0yY1uWk2BQk"},
    {"name": "Clients.csv", "url": "https://corsproxy.io/?https://drive.google.com/uc?export=download&id=1EicBhkkAOk_s27-_tHZnbAv8Ik_56TR3"},
    {"name": "emails1.csv", "url": "https://corsproxy.io/?https://drive.google.com/uc?export=download&id=1LH8xf06jH7GnOGCC92Ld7e5hJpN4ZxAV"},
    {"name": "enter_data_copy.sql", "url": "https://corsproxy.io/?https://drive.google.com/uc?export=download&id=1IDEEjS3gE4TsqJ-_bdYPAfttS7Slbyq2"},
    {"name": "Fbi.gov.csv", "url": "https://corsproxy.io/?https://drive.google.com/uc?export=download&id=1leVbmb7ZHOw5f9NBLEImu2Ob2UPLiKlk"},
    {"name": "GetContact_2020_19kk.csv", "url": "https://corsproxy.io/?https://drive.google.com/uc?export=download&id=1f0Ns-HJfZQyn-5SBj74QTUwBvHW9n6yh"},
    {"name": "getcontact.com numbuster.com.csv", "url": "https://corsproxy.io/?https://drive.google.com/uc?export=download&id=1czMpRLgFXQo8xTs6FDZVL7_jFF99Xpar"},
    {"name": "getcontact.csv", "url": "https://corsproxy.io/?https://drive.google.com/uc?export=download&id=1gSCz1BnD1M19hZpQow_-3s8CnVhm8RxQ"},
    {"name": "hlbd_form_results.sql", "url": "https://corsproxy.io/?https://drive.google.com/uc?export=download&id=1hCEPyENccz0m4qKlvrMJVCj_Y0IcH9j_"},
    {"name": "itlyceum_felix.csv", "url": "https://corsproxy.io/?https://drive.google.com/uc?export=download&id=1oBzfT6JOxJkYajCBA9iXvg6Jc_KSZwfK"},
    {"name": "kztg.csv", "url": "https://corsproxy.io/?https://drive.google.com/uc?export=download&id=1SlTbBKJ-BDoEpyyL0L46c45Bu142H4pM"},
    {"name": "Phone Pay -1.xlsx", "url": "https://corsproxy.io/?https://drive.google.com/uc?export=download&id=1k3R1TxqoeTMvguYn8pjCICNFcU7mup2l"},
    {"name": "Phone Pay -2.xlsx", "url": "https://corsproxy.io/?https://drive.google.com/uc?export=download&id=1k3R1TxqoeTMvguYn8pjCICNFcU7mup2l"},
    {"name": "Phone Pay.xlsx", "url": "https://corsproxy.io/?https://drive.google.com/uc?export=download&id=1vMylLEXUECkL5rvXVgeKejDA_RiFyfOt"},
    {"name": "phone.csv", "url": "https://corsproxy.io/?https://drive.google.com/uc?export=download&id=1_4fy0XswInx6Ke8JzI0gKuo5jzcG4LYm"},
    {"name": "–ê–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–æ–≤_9.3k.csv", "url": "https://corsproxy.io/?https://drive.google.com/uc?export=download&id=1nZIuSMThLynwXkrJj6jWgos-NwvsSrps"}
];

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let tg = window.Telegram.WebApp;
let user = tg ? tg.initDataUnsafe.user : null;
let searchesLeft = 3;
let isAdmin = false;
let userStorage = JSON.parse(localStorage.getItem('userStorage')) || {};
let activeSearches = 0;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
function initTelegramApp() {
    if (tg) {
        tg.expand();
        tg.ready();
        
        if (user && user.id) {
            console.log('üë§ User from Telegram:', user);
            isAdmin = (user.id == ADMIN_ID);
            
            if (isAdmin) {
                searchesLeft = 9999;
                showMainMenu();
                return;
            }
            
            if (!userStorage[user.id]) {
                userStorage[user.id] = {
                    searches_left: 3,
                    unlimited: false,
                    last_active: Date.now(),
                    first_seen: Date.now(),
                    username: user.username || `user_${user.id}`,
                    first_name: user.first_name || '',
                    total_searches: 0,
                    is_real_user: true
                };
                saveUserData();
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –±–æ—Ç
                if (tg.sendData) {
                    tg.sendData(JSON.stringify({
                        action: 'new_user_registered',
                        user_id: user.id,
                        username: user.username,
                        first_name: user.first_name
                    }));
                }
            } else {
                searchesLeft = userStorage[user.id].searches_left;
                userStorage[user.id].last_active = Date.now();
                saveUserData();
            }
        }
    }
    
    if (!isAdmin) {
        showElement('auth');
    }
}

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç—å—é
function showElement(id) {
    document.getElementById(id).classList.remove('hidden');
}

function hideElement(id) {
    document.getElementById(id).classList.add('hidden');
}

function hideAllSections() {
    ['auth', 'search', 'payment', 'adminPanel'].forEach(hideElement);
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
function saveUserData() {
    localStorage.setItem('userStorage', JSON.stringify(userStorage));
}

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
function showMainMenu() {
    hideAllSections();
    
    if (isAdmin) {
        showElement('adminPanel');
        loadAdminStats();
    } else {
        showElement('search');
        updateSearchesCounter();
    }
}

// –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
function checkPassword() {
    let password = document.getElementById('password').value;
    if (password === USER_PASSWORD) {
        if (user && user.id) {
            if (!userStorage[user.id]) {
                userStorage[user.id] = {
                    searches_left: 3,
                    unlimited: false,
                    last_active: Date.now(),
                    first_seen: Date.now(),
                    username: user.username || 'unknown',
                    first_name: user.first_name || '',
                    total_searches: 0,
                    is_real_user: true
                };
                saveUserData();
            }
            searchesLeft = userStorage[user.id].searches_left;
            saveUserData();
        }
        showMainMenu();
    } else {
        alert('‚ùå –ù–ï–í–ï–†–ù–´–ô –ü–ê–†–û–õ–¨!');
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞
function updateSearchesCounter() {
    const counter = document.getElementById('searchesLeft');
    if (isAdmin) {
        counter.textContent = '‚àû';
        counter.style.color = '#00aa00';
    } else {
        counter.textContent = searchesLeft;
        counter.style.color = searchesLeft > 0 ? '#2481cc' : '#ff4444';
    }
}

// –£–õ–£–ß–®–ï–ù–ù–´–ô –ü–û–ò–°–ö - –í–û–ó–í–†–ê–©–ê–ï–ú –ò–ú–ï–ù–ê –ò EMAIL
async function searchData() {
    let query = document.getElementById('query').value.trim();
    
    if (query.length < 2) {
        alert('‚ùå –ú–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞');
        return;
    }
    
    if (!isAdmin && searchesLeft <= 0) {
        hideElement('search');
        showElement('payment');
        return;
    }
    
    // –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–∏—Å–∫–∏
    if (activeSearches > 0) {
        alert('‚è≥ –ü–æ–∏—Å–∫ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...');
        return;
    }
    
    activeSearches++;
    
    if (!isAdmin) {
        searchesLeft--;
        if (user && user.id) {
            userStorage[user.id].searches_left = searchesLeft;
            userStorage[user.id].last_active = Date.now();
            userStorage[user.id].total_searches = (userStorage[user.id].total_searches || 0) + 1;
            saveUserData();
        }
        updateSearchesCounter();
    }
    
    let resultsDiv = document.getElementById('results');
    resultsDiv.innerHTML = '<div class="result">üîç –ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ –ø–æ 16 –±–∞–∑–∞–º...</div>';
    
    try {
        await performSmartSearch(query, resultsDiv);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', error);
        resultsDiv.innerHTML = '<div class="result">‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ</div>';
    } finally {
        activeSearches--;
    }
}

// –£–ú–ù–´–ô –ü–û–ò–°–ö - –í–û–ó–í–†–ê–©–ê–ï–ú –í–°–ï –î–ê–ù–ù–´–ï
async function performSmartSearch(query, resultsDiv) {
    const allResults = [];
    let completed = 0;
    let foundInFiles = 0;
    let errors = 0;
    
    resultsDiv.innerHTML = `<div class="result">üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∑–∞–ø—Ä–æ—Å... (0/${DRIVE_FILES.length})</div>`;
    
    // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞
    const isPhone = /^[\d\+\(\)\s-]{7,}$/.test(query);
    const isEmail = /@/.test(query);
    const isName = /^[–ê-–Ø–∞-—è–Å—ëA-Za-z\s]{3,}$/.test(query);
    
    const searchPromises = DRIVE_FILES.map(async (file, index) => {
        try {
            // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            await new Promise(resolve => setTimeout(resolve, index * 300));
            
            const response = await fetchWithTimeout(file.url, 15000);
            if (response.ok) {
                const content = await response.text();
                const fileResults = searchInContentOptimized(content, query, file.name, isPhone, isEmail, isName);
                
                if (fileResults.length > 0) {
                    foundInFiles++;
                    allResults.push(...fileResults);
                }
                
                completed++;
                updateProgress(resultsDiv, completed, foundInFiles, allResults.length, errors);
                
                return { success: true, file: file.name, results: fileResults.length };
            } else {
                errors++;
                completed++;
                updateProgress(resultsDiv, completed, foundInFiles, allResults.length, errors);
                return { success: false, file: file.name, error: `HTTP ${response.status}` };
            }
        } catch (error) {
            errors++;
            completed++;
            updateProgress(resultsDiv, completed, foundInFiles, allResults.length, errors);
            return { success: false, file: file.name, error: error.message };
        }
    });
    
    await Promise.allSettled(searchPromises);
    displaySmartResults(allResults, query, foundInFiles, errors, resultsDiv);
}

// –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô –ø–æ–∏—Å–∫ - –í–û–ó–í–†–ê–©–ê–ï–ú –ò–ú–ï–ù–ê –ò EMAIL –ü–†–ò –ü–û–ò–°–ö–ï –ü–û –ù–û–ú–ï–†–£
function searchInContentOptimized(content, query, fileName, isPhone, isEmail, isName) {
    const results = [];
    const lines = content.split('\n');
    const queryLower = query.toLowerCase().trim();
    const normalizedQuery = query.replace(/\D/g, '');
    
    let linesChecked = 0;
    const maxLines = 10000;
    const maxResultsPerFile = 100;

    for (let i = 0; i < Math.min(lines.length, maxLines); i++) {
        if (results.length >= maxResultsPerFile) break;
        
        const line = lines[i];
        linesChecked++;
        
        if (!line.trim()) continue;
        
        const lineLower = line.toLowerCase();
        
        // –ï–°–õ–ò –ü–û–ò–°–ö –ü–û –ù–û–ú–ï–†–£ - –ò–©–ï–ú –í–°–ï –î–ê–ù–ù–´–ï –í –°–¢–†–û–ö–ï
        if (isPhone && line.includes(normalizedQuery)) {
            // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç—Ä–æ–∫–µ –≥–¥–µ –µ—Å—Ç—å –Ω–æ–º–µ—Ä
            const phones = line.match(/\b\d{7,15}\b/g) || [];
            const names = line.match(/[–ê-–Ø–Å][–∞-—è—ë]+\s+[–ê-–Ø–Å][–∞-—è—ë]+/g) || [];
            const emails = line.match(/\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b/g) || [];
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            phones.forEach(phone => {
                if (phone.includes(normalizedQuery) && results.length < maxResultsPerFile) {
                    let resultLine = `üìû ${phone}`;
                    // –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è –µ—Å–ª–∏ –µ—Å—Ç—å
                    if (names.length > 0) resultLine += ` | üë§ ${names[0]}`;
                    // –î–æ–±–∞–≤–ª—è–µ–º email –µ—Å–ª–∏ –µ—Å—Ç—å
                    if (emails.length > 0) resultLine += ` | üìß ${emails[0]}`;
                    results.push(resultLine);
                }
            });
        } 
        else if (isEmail && lineLower.includes(queryLower)) {
            const emails = line.match(/\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b/g) || [];
            const names = line.match(/[–ê-–Ø–Å][–∞-—è—ë]+\s+[–ê-–Ø–Å][–∞-—è—ë]+/g) || [];
            const phones = line.match(/\b\d{7,15}\b/g) || [];
            
            emails.forEach(email => {
                if (email.toLowerCase().includes(queryLower) && results.length < maxResultsPerFile) {
                    let resultLine = `üìß ${email}`;
                    if (names.length > 0) resultLine += ` | üë§ ${names[0]}`;
                    if (phones.length > 0) resultLine += ` | üìû ${phones[0]}`;
                    results.push(resultLine);
                }
            });
        }
        else if (isName && lineLower.includes(queryLower)) {
            const names = line.match(/[–ê-–Ø–Å][–∞-—è—ë]+\s+[–ê-–Ø–Å][–∞-—è—ë]+/g) || [];
            const phones = line.match(/\b\d{7,15}\b/g) || [];
            const emails = line.match(/\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b/g) || [];
            
            names.forEach(name => {
                if (name.toLowerCase().includes(queryLower) && results.length < maxResultsPerFile) {
                    let resultLine = `üë§ ${name}`;
                    if (phones.length > 0) resultLine += ` | üìû ${phones[0]}`;
                    if (emails.length > 0) resultLine += ` | üìß ${emails[0]}`;
                    results.push(resultLine);
                }
            });
        }
        else if (lineLower.includes(queryLower)) {
            // –û–±—â–∏–π –ø–æ–∏—Å–∫ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤
            const phones = line.match(/\b\d{7,15}\b/g) || [];
            const names = line.match(/[–ê-–Ø–Å][–∞-—è—ë]+\s+[–ê-–Ø–Å][–∞-—è—ë]+/g) || [];
            const emails = line.match(/\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b/g) || [];
            
            // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
            if (phones.length > 0 || names.length > 0 || emails.length > 0) {
                let resultLine = '';
                if (phones.length > 0) resultLine += `üìû ${phones[0]} `;
                if (names.length > 0) resultLine += `| üë§ ${names[0]} `;
                if (emails.length > 0) resultLine += `| üìß ${emails[0]}`;
                
                if (resultLine.trim() && results.length < maxResultsPerFile) {
                    results.push(resultLine.trim());
                }
            }
        }
    }
    
    return results;
}

// –§—É–Ω–∫—Ü–∏—è —Å —Ç–∞–π–º–∞—É—Ç–æ–º
function fetchWithTimeout(url, timeout) {
    return Promise.race([
        fetch(url),
        new Promise((_, reject) =>
            setTimeout(() => reject(new Error('Timeout')), timeout)
        )
    ]);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
function updateProgress(resultsDiv, completed, foundInFiles, totalResults, errors) {
    const progress = Math.round((completed / DRIVE_FILES.length) * 100);
    resultsDiv.innerHTML = `
        <div class="result">
            üîç –ü–æ–∏—Å–∫... ${progress}%<br>
            üìÅ –ë–∞–∑—ã: ${completed}/${DRIVE_FILES.length}<br>
            ‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤: ${foundInFiles} —Ñ–∞–π–ª–∞—Ö<br>
            üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${totalResults}<br>
            ‚ùå –û—à–∏–±–æ–∫: ${errors}
        </div>
    `;
}

// –£–ú–ù–´–ô –ø–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ - –ë–ï–ó –ù–ê–ó–í–ê–ù–ò–ô –§–ê–ô–õ–û–í
function displaySmartResults(results, query, foundInFiles, errors, resultsDiv) {
    const uniqueResults = [...new Set(results)];
    
    if (uniqueResults.length > 0) {
        let html = `<div class="result" style="background: #e8f5e8;">
            ‚úÖ –ü–û–ò–°–ö –ó–ê–í–ï–†–®–ï–ù<br>
            üîç –ó–∞–ø—Ä–æ—Å: "${query}"<br>
            üìÅ –§–∞–π–ª–æ–≤ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏: ${foundInFiles}<br>
            üìä –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: ${uniqueResults.length}<br>
            ‚ùå –û—à–∏–±–æ–∫: ${errors}
        </div>`;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–º–µ—Å—Ç–µ (–Ω–µ –≥—Ä—É–ø–ø–∏—Ä—É–µ–º)
        uniqueResults.slice(0, 50).forEach(result => {
            html += `<div class="result">${result}</div>`;
        });
        
        if (uniqueResults.length > 50) {
            html += `<div class="result">... –∏ –µ—â–µ ${uniqueResults.length - 50} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤</div>`;
        }
        
        resultsDiv.innerHTML = html;
    } else {
        resultsDiv.innerHTML = `
            <div class="result">
                ‚ùå –ü–æ –∑–∞–ø—Ä–æ—Å—É "${query}" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ<br>
                üìÅ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –±–∞–∑: ${DRIVE_FILES.length}<br>
                ‚úÖ –£—Å–ø–µ—à–Ω–æ: ${DRIVE_FILES.length - errors}<br>
                ‚ùå –û—à–∏–±–æ–∫: ${errors}<br>
                üí° –°–æ–≤–µ—Ç: –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞
            </div>
        `;
    }
    
    if (!isAdmin && searchesLeft <= 0) {
        setTimeout(() => {
            hideElement('search');
            showElement('payment');
        }, 3000);
    }
}

// –†–ï–ê–õ–¨–ù–ê–Ø –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨ - –ë–ï–ó –î–ï–ú–û-–î–ê–ù–ù–´–•
function loadAdminStats() {
    const realUsers = Object.values(userStorage).filter(u => u.is_real_user);
    const totalUsers = realUsers.length;
    const activeUsers = realUsers.filter(u => u.searches_left > 0).length;
    const totalSearches = realUsers.reduce((sum, user) => sum + (user.total_searches || 0), 0);
    
    // –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
    const active24h = realUsers.filter(u => Date.now() - u.last_active < 24 * 60 * 60 * 1000).length;
    
    document.getElementById('adminStats').innerHTML = `
        <div class="result">
            <strong>üìä –†–ï–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê</strong><br>
            üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <strong>${totalUsers}</strong><br>
            üî• –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–π—á–∞—Å: <strong>${activeUsers}</strong><br>
            ‚è∞ –ó–∞ 24 —á–∞—Å–∞: <strong>${active24h}</strong><br>
            üîç –í—Å–µ–≥–æ –ø–æ–∏—Å–∫–æ–≤: <strong>${totalSearches}</strong><br>
            üíé –í–∞—à —Å—Ç–∞—Ç—É—Å: <strong style="color: #00aa00;">–ë–ï–ó–õ–ò–ú–ò–¢ ‚àû</strong>
        </div>
    `;
}

function showAdminSection(section) {
    ['Stats', 'Users', 'AddSearches', 'Broadcast', 'Sniffer'].forEach(sec => {
        hideElement(`admin${sec}`);
    });
    
    showElement(`admin${section}`);
    
    if (section === 'Users') loadRealUserList();
    if (section === 'AddSearches') initAddSearches();
    if (section === 'Broadcast') initBroadcast();
    if (section === 'Sniffer') initSniffer();
}

// –†–ï–ê–õ–¨–ù–´–ô —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
function loadRealUserList() {
    const realUsers = Object.entries(userStorage)
        .filter(([id, data]) => data.is_real_user)
        .map(([id, data]) => ({
            id, 
            searches_left: data.searches_left,
            username: data.username || `user_${id}`,
            first_name: data.first_name || '',
            last_active: data.last_active,
            first_seen: data.first_seen,
            total_searches: data.total_searches || 0
        }))
        .sort((a, b) => b.last_active - a.last_active);
    
    let html = '<div class="result"><strong>üë• –†–ï–ê–õ–¨–ù–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò:</strong><br>';
    
    if (realUsers.length === 0) {
        html += 'üì≠ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç';
    } else {
        realUsers.forEach(user => {
            const status = user.searches_left > 0 ? 'üü¢ –ê–ö–¢–ò–í–ï–ù' : 'üî¥ –ù–ï–¢ –ó–ê–ü–†–û–°–û–í';
            const lastSeen = getTimeAgo(user.last_active);
            const firstSeen = new Date(user.first_seen).toLocaleDateString();
            
            html += `
                üë§ ${user.first_name || user.username}<br>
                üÜî ID: <strong>${user.id}</strong><br>
                üíé –ó–∞–ø—Ä–æ—Å–æ–≤: <strong>${user.searches_left}</strong><br>
                üîç –ü–æ–∏—Å–∫–æ–≤: <strong>${user.total_searches}</strong><br>
                üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: ${firstSeen}<br>
                üì± ${status} (${lastSeen})<br>
                ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ<br>
            `;
        });
        
        html += `<br>üìà –í—Å–µ–≥–æ: <strong>${realUsers.length}</strong> —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`;
    }
    
    html += '</div>';
    document.getElementById('adminUsers').innerHTML = html;
}

function getTimeAgo(timestamp) {
    const diff = Date.now() - timestamp;
    const minutes = Math.floor(diff / 60000);
    const hours = Math.floor(diff / 3600000);
    const days = Math.floor(diff / 86400000);
    
    if (days > 0) return `${days}–¥ –Ω–∞–∑–∞–¥`;
    if (hours > 0) return `${hours}—á –Ω–∞–∑–∞–¥`;
    if (minutes > 0) return `${minutes}–º –Ω–∞–∑–∞–¥`;
    return '—Ç–æ–ª—å–∫–æ —á—Ç–æ';
}

function initAddSearches() {
    document.getElementById('adminAddSearches').innerHTML = `
        <div class="result">
            <strong>üéÅ –í–´–î–ê–ß–ê –ó–ê–ü–†–û–°–û–í</strong><br><br>
            
            <input type="text" id="addUserId" placeholder="ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è">
            <select id="addSearchesType">
                <option value="5">5 –∑–∞–ø—Ä–æ—Å–æ–≤</option>
                <option value="10">10 –∑–∞–ø—Ä–æ—Å–æ–≤</option>
                <option value="25">25 –∑–∞–ø—Ä–æ—Å–æ–≤</option>
                <option value="50">50 –∑–∞–ø—Ä–æ—Å–æ–≤</option>
                <option value="100">100 –∑–∞–ø—Ä–æ—Å–æ–≤</option>
                <option value="unlimited">–ë–ï–ó–õ–ò–ú–ò–¢</option>
            </select>
            
            <button onclick="addSearchesToUser()" style="background: #00aa00;">
                üíé –í–´–î–ê–¢–¨ –ó–ê–ü–†–û–°–´
            </button>
            
            <div id="addSearchesResult" style="margin-top: 10px;"></div>
        </div>
    `;
}

// –†–ï–ê–õ–¨–ù–ê–Ø –≤—ã–¥–∞—á–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º —á–µ—Ä–µ–∑ –±–æ—Ç–∞
function addSearchesToUser() {
    const userId = document.getElementById('addUserId').value.trim();
    const type = document.getElementById('addSearchesType').value;
    const resultDiv = document.getElementById('addSearchesResult');
    
    if (!userId) {
        resultDiv.innerHTML = '<div style="color: red;">‚ùå –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</div>';
        return;
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –±–æ—Ç—É
    if (tg && tg.sendData) {
        tg.sendData(JSON.stringify({
            action: 'admin_add_searches',
            user_id: parseInt(userId),
            search_type: type,
            admin_id: user.id,
            timestamp: Date.now()
        }));
        
        resultDiv.innerHTML = `
            <div style="color: green;">
                ‚úÖ –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –±–æ—Ç—É!<br>
                üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <strong>${userId}</strong><br>
                üíé –ó–∞–ø—Ä–æ—Å—ã: <strong>${type === 'unlimited' ? '–ë–ï–ó–õ–ò–ú–ò–¢' : type}</strong><br>
                üì® –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ...
            </div>
        `;

        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
        if (!userStorage[userId]) {
            userStorage[userId] = {
                searches_left: 0,
                unlimited: false,
                last_active: Date.now(),
                first_seen: Date.now(),
                username: `user_${userId}`,
                is_real_user: true
            };
        }

        if (type === 'unlimited') {
            userStorage[userId].unlimited = true;
            userStorage[userId].searches_left = 9999;
        } else {
            const addAmount = parseInt(type);
            userStorage[userId].searches_left += addAmount;
            userStorage[userId].unlimited = false;
        }

        userStorage[userId].last_active = Date.now();
        saveUserData();

    } else {
        resultDiv.innerHTML = '<div style="color: red;">‚ùå –û—à–∏–±–∫–∞: Telegram WebApp –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω</div>';
    }
    
    showNotification(`–ó–∞–ø—Ä–æ—Å—ã –≤—ã–¥–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`);
}

function initBroadcast() {
    document.getElementById('adminBroadcast').innerHTML = `
        <div class="result">
            <strong>üì¢ –†–ê–°–°–´–õ–ö–ê –í–°–ï–ú –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú</strong><br><br>
            
            <textarea id="broadcastMessage" placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏..." rows="4"></textarea>
            
            <button onclick="sendRealBroadcast()" style="background: #ff4444;">
                üì¢ –û–¢–ü–†–ê–í–ò–¢–¨ –†–ê–°–°–´–õ–ö–£
            </button>
            
            <div id="broadcastResult" style="margin-top: 10px;"></div>
        </div>
    `;
}

// –†–ï–ê–õ–¨–ù–ê–Ø —Ä–∞—Å—Å—ã–ª–∫–∞ —á–µ—Ä–µ–∑ –±–æ—Ç–∞
function sendRealBroadcast() {
    const message = document.getElementById('broadcastMessage').value.trim();
    const resultDiv = document.getElementById('broadcastResult');
    
    if (!message) {
        resultDiv.innerHTML = '<div style="color: red;">‚ùå –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏</div>';
        return;
    }

    if (tg && tg.sendData) {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –±–æ—Ç—É –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É
        tg.sendData(JSON.stringify({
            action: 'admin_broadcast',
            message: message,
            admin_id: user.id,
            user_count: Object.keys(userStorage).length,
            timestamp: Date.now()
        }));

        resultDiv.innerHTML = '<div style="color: blue;">üîÑ –û—Ç–ø—Ä–∞–≤–ª—è—é –∫–æ–º–∞–Ω–¥—É –±–æ—Ç—É –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É...</div>';
        
        // –ò–º–∏—Ç–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
        setTimeout(() => {
            const userCount = Object.keys(userStorage).length;
            resultDiv.innerHTML = `
                <div style="color: green;">
                    ‚úÖ –ö–æ–º–∞–Ω–¥–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –±–æ—Ç—É!<br>
                    üì® –°–æ–æ–±—â–µ–Ω–∏–µ: "${message}"<br>
                    üë• –ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π: ~${userCount} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π<br>
                    ‚ö° –ë–æ—Ç –Ω–∞—á–∞–ª —Ä–∞—Å—Å—ã–ª–∫—É...
                </div>
            `;
            showNotification(`–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞ –¥–ª—è ${userCount} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
        }, 2000);

    } else {
        resultDiv.innerHTML = '<div style="color: red;">‚ùå –û—à–∏–±–∫–∞: Telegram WebApp –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω</div>';
    }
}

function initSniffer() {
    document.getElementById('adminSniffer').innerHTML = `
        <div class="result">
            <strong>üìä –ú–û–ù–ò–¢–û–†–ò–ù–ì –ê–ö–¢–ò–í–ù–û–°–¢–ò</strong><br><br>
            
            <div style="background: #1a1a1a; color: #00ff00; padding: 10px; border-radius: 5px; font-family: monospace; font-size: 12px;">
                üöÄ –°–ò–°–¢–ï–ú–ê –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê<br>
                üìà –°–±–æ—Ä —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...
            </div>
            
            <button onclick="showRealTimeStats()" style="background: #00aa00; margin: 10px 0;">
                üìä –û–ë–ù–û–í–ò–¢–¨ –°–¢–ê–¢–ò–°–¢–ò–ö–£
            </button>
            
            <button onclick="exportUserData()" style="background: #8e44ad;">
                üíæ –≠–ö–°–ü–û–†–¢ –î–ê–ù–ù–´–•
            </button>
            
            <div id="snifferOutput" style="margin-top: 10px;"></div>
        </div>
    `;
}

// –†–ï–ê–õ–¨–ù–ê–Ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
function showRealTimeStats() {
    const output = document.getElementById('snifferOutput');
    const realUsers = Object.values(userStorage).filter(u => u.is_real_user);
    
    const now = Date.now();
    const activeNow = realUsers.filter(u => now - u.last_active < 5 * 60 * 1000).length;
    const activeToday = realUsers.filter(u => {
        const today = new Date().toDateString();
        const userDate = new Date(u.last_active).toDateString();
        return today === userDate;
    }).length;
    
    const searchesToday = realUsers.reduce((sum, user) => {
        const today = new Date().toDateString();
        const userDate = new Date(user.last_active).toDateString();
        return sum + (today === userDate ? (user.total_searches || 0) : 0);
    }, 0);
    
    output.innerHTML = `
        <div class="result" style="background: #e8f5e8;">
            <strong>üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –í –†–ï–ê–õ–¨–ù–û–ú –í–†–ï–ú–ï–ù–ò</strong><br>
            üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <strong>${realUsers.length}</strong><br>
            üî• –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–π—á–∞—Å (5–º–∏–Ω): <strong>${activeNow}</strong><br>
            üìà –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: <strong>${activeToday}</strong><br>
            üîç –ü–æ–∏—Å–∫–æ–≤ —Å–µ–≥–æ–¥–Ω—è: <strong>${searchesToday}</strong><br>
            ‚è∞ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${new Date().toLocaleTimeString()}
        </div>
    `;
}

function exportUserData() {
    const realUsers = Object.values(userStorage).filter(u => u.is_real_user);
    const dataStr = JSON.stringify(realUsers, null, 2);
    const dataBlob = new Blob([dataStr], {type: 'application/json'});
    
    const url = URL.createObjectURL(dataBlob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `users_export_${new Date().toISOString().split('T')[0]}.json`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
    
    showNotification('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!');
}

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
function showNotification(message) {
    const notification = document.createElement('div');
    notification.className = 'notification';
    notification.textContent = message;
    document.body.appendChild(notification);
    
    setTimeout(() => {
        document.body.removeChild(notification);
    }, 3000);
}

// –ü–ª–∞—Ç–µ–∂–∏
function buyRequests(amount) {
    if (isAdmin) {
        alert('üíé –£ –≤–∞—Å –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø!');
        return;
    }
    
    searchesLeft += amount;
    if (user && user.id) {
        userStorage[user.id].searches_left = searchesLeft;
        saveUserData();
    }
    updateSearchesCounter();
    
    hideElement('payment');
    showElement('search');
    
    showNotification(`–î–æ–±–∞–≤–ª–µ–Ω–æ ${amount} –∑–∞–ø—Ä–æ—Å–æ–≤!`);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', function() {
    initTelegramApp();
});
