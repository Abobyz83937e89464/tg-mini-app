// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const ADMIN_ID = 8049083248;
const USER_PASSWORD = "morpa";

// –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å CORS proxy
const DRIVE_FILES = [
    {"name": "boo.wf_100mln_0.csv", "url": "https://corsproxy.io/?https://drive.google.com/uc?export=download&id=1U6C-SqeNWv3ylYujFBTZS0yY1uWk2BQk"},
    {"name": "Clients.csv", "url": "https://corsproxy.io/?https://drive.google.com/uc?export=download&id=1EicBhkkAOk_s27-_tHZnbAv8Ik_56TR3"},
    {"name": "emails1.csv", "url": "https://corsproxy.io/?https://drive.google.com/uc?export=download&id=1LH8xf06jH7GnOGCC92Ld7e5hJpN4ZxAV"},
    {"name": "enter_data_copy.sql", "url": "https://corsproxy.io/?https://drive.google.com/uc?export=download&id=1IDEEjS3gE4TsqJ-_bdYPAfttS7Slbyq2"},
    {"name": "Fbi.gov.csv", "url": "https://corsproxy.io/?https://drive.google.com/uc?export=download&id=1leVbmb7ZHOw5f9NBLEImu2Ob2UPLiKlk"},
    {"name": "GetContact_2020_19kk.csv", "url": "https://corsproxy.io/?https://drive.google.com/uc?export=download&id=1f0Ns-HJfZQyn-5SBj74QTUwBvHW9n6yh"},
    {"name": "getcontact.com numbuster.com.csv", "url": "https://corsproxy.io/?https://drive.google.com/uc?export=download&id=1czMpRLgFXQo8xTs6FDZVL7_jFF99Xpar"},
    {"name": "getcontact.csv", "url": "https://corsproxy.io/?https://drive.google.com/uc?export=download&id=1gSCz1BnD1M19hZpQow_-3s8CnVhm8RxQ"},
    {"name": "hlbd_form_results.sql", "url": "https://corsproxy.io/?https://drive.google.com/uc?export=download&id=1hCEPyENccz0m4qKlvrMJVCj_Y0IcH9j_"},
    {"name": "itlyceum_felix.csv", "url": "https://corsproxy.io/?https://drive.google.com/uc?export=download&id=1oBzfT6JOxJkYajCBA9iXvg6Jc_KSZwfK"},
    {"name": "kztg.csv", "url": "https://corsproxy.io/?https://drive.google.com/uc?export=download&id=1SlTbBKJ-BDoEpyyL0L46c45Bu142H4pM"},
    {"name": "Phone Pay -1.xlsx", "url": "https://corsproxy.io/?https://drive.google.com/uc?export=download&id=1k3R1TxqoeTMvguYn8pjCICNFcU7mup2l"},
    {"name": "Phone Pay -2.xlsx", "url": "https://corsproxy.io/?https://drive.google.com/uc?export=download&id=1k3R1TxqoeTMvguYn8pjCICNFcU7mup2l"},
    {"name": "Phone Pay.xlsx", "url": "https://corsproxy.io/?https://drive.google.com/uc?export=download&id=1vMylLEXUECkL5rvXVgeKejDA_RiFyfOt"},
    {"name": "phone.csv", "url": "https://corsproxy.io/?https://drive.google.com/uc?export=download&id=1_4fy0XswInx6Ke8JzI0gKuo5jzcG4LYm"},
    {"name": "–ê–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–æ–≤_9.3k.csv", "url": "https://corsproxy.io/?https://drive.google.com/uc?export=download&id=1nZIuSMThLynwXkrJj6jWgos-NwvsSrps"}
];

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let tg = window.Telegram.WebApp;
let user = tg ? tg.initDataUnsafe.user : null;
let searchesLeft = 3;
let isAdmin = false;
let userStorage = JSON.parse(localStorage.getItem('userStorage')) || {};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
function initTelegramApp() {
    if (tg) {
        tg.expand();
        tg.ready();
        
        if (user && user.id) {
            console.log('üë§ User from Telegram:', user);
            isAdmin = (user.id == ADMIN_ID);
            
            if (isAdmin) {
                searchesLeft = 9999;
                showMainMenu();
                return;
            }
            
            if (!userStorage[user.id]) {
                userStorage[user.id] = {
                    searches_left: 3,
                    unlimited: false,
                    last_active: Date.now(),
                    username: user.username || `user_${user.id}`,
                    first_name: user.first_name || ''
                };
                saveUserData();
            } else {
                searchesLeft = userStorage[user.id].searches_left;
            }
        }
    }
    
    if (!isAdmin) {
        showElement('auth');
    }
}

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç—å—é
function showElement(id) {
    document.getElementById(id).classList.remove('hidden');
}

function hideElement(id) {
    document.getElementById(id).classList.add('hidden');
}

function hideAllSections() {
    ['auth', 'search', 'payment', 'adminPanel'].forEach(hideElement);
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
function saveUserData() {
    localStorage.setItem('userStorage', JSON.stringify(userStorage));
}

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
function showMainMenu() {
    hideAllSections();
    
    if (isAdmin) {
        showElement('adminPanel');
        loadAdminStats();
    } else {
        showElement('search');
        updateSearchesCounter();
    }
}

// –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
function checkPassword() {
    let password = document.getElementById('password').value;
    if (password === USER_PASSWORD) {
        if (user && user.id) {
            if (!userStorage[user.id]) {
                userStorage[user.id] = {
                    searches_left: 3,
                    unlimited: false,
                    last_active: Date.now(),
                    username: user.username || 'unknown'
                };
            }
            searchesLeft = userStorage[user.id].searches_left;
            saveUserData();
        }
        showMainMenu();
    } else {
        alert('‚ùå –ù–ï–í–ï–†–ù–´–ô –ü–ê–†–û–õ–¨!');
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞
function updateSearchesCounter() {
    const counter = document.getElementById('searchesLeft');
    if (isAdmin) {
        counter.textContent = '‚àû';
        counter.style.color = '#00aa00';
    } else {
        counter.textContent = searchesLeft;
        counter.style.color = searchesLeft > 0 ? '#2481cc' : '#ff4444';
    }
}

// –ü–û–ò–°–ö –ü–û –ë–ê–ó–ê–ú - –†–ï–ê–õ–¨–ù–´–ô –° CORS PROXY!
async function searchData() {
    let query = document.getElementById('query').value.trim();
    
    if (query.length < 2) {
        alert('‚ùå –ú–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞');
        return;
    }
    
    if (!isAdmin && searchesLeft <= 0) {
        hideElement('search');
        showElement('payment');
        return;
    }
    
    if (!isAdmin) {
        searchesLeft--;
        if (user && user.id) {
            userStorage[user.id].searches_left = searchesLeft;
            userStorage[user.id].last_active = Date.now();
            userStorage[user.id].total_searches = (userStorage[user.id].total_searches || 0) + 1;
            saveUserData();
        }
        updateSearchesCounter();
    }
    
    let resultsDiv = document.getElementById('results');
    resultsDiv.innerHTML = '<div class="result">üîç –ù–∞—á–∏–Ω–∞—é –†–ï–ê–õ–¨–ù–´–ô –ø–æ–∏—Å–∫ –ø–æ 16 –±–∞–∑–∞–º...</div>';
    
    try {
        await performRealSearchWithProxy(query, resultsDiv);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', error);
        resultsDiv.innerHTML = `
            <div class="result">
                ‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–∞–º<br>
                üîß –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è CORS proxy<br>
                üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å
            </div>
        `;
    }
}

// –†–ï–ê–õ–¨–ù–´–ô –ø–æ–∏—Å–∫ —Å CORS proxy
async function performRealSearchWithProxy(query, resultsDiv) {
    const allResults = [];
    let completed = 0;
    let foundInFiles = 0;
    let errors = 0;
    
    resultsDiv.innerHTML = `<div class="result">üîç –ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ –±–∞–∑–∞–º —á–µ—Ä–µ–∑ proxy... (0/${DRIVE_FILES.length})</div>`;
    
    const BATCH_SIZE = 3;
    
    for (let i = 0; i < DRIVE_FILES.length; i += BATCH_SIZE) {
        const batch = DRIVE_FILES.slice(i, i + BATCH_SIZE);
        const batchPromises = batch.map(async (file) => {
            try {
                console.log(`üîÑ –ó–∞–≥—Ä—É–∂–∞—é: ${file.name}`);
                
                const response = await fetch(file.url, {
                    method: 'GET',
                    headers: {
                        'Accept': 'text/plain, */*',
                        'Cache-Control': 'no-cache'
                    }
                });
                
                if (response.ok) {
                    const content = await response.text();
                    const fileResults = searchInContent(content, query, file.name);
                    
                    if (fileResults.length > 0) {
                        foundInFiles++;
                        allResults.push(...fileResults);
                        console.log(`‚úÖ ${file.name}: –Ω–∞–π–¥–µ–Ω–æ ${fileResults.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤`);
                    } else {
                        console.log(`‚ÑπÔ∏è ${file.name}: —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ—Ç`);
                    }
                    
                    completed++;
                    updateProgress(resultsDiv, completed, foundInFiles, allResults.length, errors);
                    return { success: true, file: file.name, results: fileResults.length };
                } else {
                    console.log(`‚ùå ${file.name}: –æ—à–∏–±–∫–∞ HTTP ${response.status}`);
                    errors++;
                    completed++;
                    updateProgress(resultsDiv, completed, foundInFiles, allResults.length, errors);
                    return { success: false, file: file.name, error: `HTTP ${response.status}` };
                }
            } catch (error) {
                console.error(`‚ùå ${file.name}:`, error);
                errors++;
                completed++;
                updateProgress(resultsDiv, completed, foundInFiles, allResults.length, errors);
                return { success: false, file: file.name, error: error.message };
            }
        });
        
        await Promise.allSettled(batchPromises);
        await new Promise(resolve => setTimeout(resolve, 500));
    }
    
    displayFinalResults(allResults, query, foundInFiles, errors, resultsDiv);
}

// –ü–æ–∏—Å–∫ –≤ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º
function searchInContent(content, query, fileName) {
    const results = [];
    const lines = content.split('\n');
    const queryLower = query.toLowerCase().trim();
    const normalizedQuery = query.replace(/\D/g, '');
    
    for (let i = 0; i < Math.min(lines.length, 10000); i++) {
        const line = lines[i];
        const lineLower = line.toLowerCase();
        
        if (lineLower.includes(queryLower) || line.includes(normalizedQuery)) {
            const phones = line.match(/\b\d{7,15}\b/g) || [];
            const names = line.match(/[–ê-–Ø–Å][–∞-—è—ë]+\s+[–ê-–Ø–Å][–∞-—è—ë]+/g) || [];
            const emails = line.match(/\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b/g) || [];
            
            phones.forEach(phone => {
                if (phone.includes(normalizedQuery) || phone.includes(query)) {
                    results.push(`üìû ${phone} | üìÅ ${fileName}`);
                }
            });
            
            names.forEach(name => {
                results.push(`üë§ ${name} | üìÅ ${fileName}`);
            });
            
            emails.forEach(email => {
                results.push(`üìß ${email} | üìÅ ${fileName}`);
            });
            
            if (phones.some(phone => phone === query || phone === normalizedQuery)) {
                const context = line.substring(0, 150).replace(/[^\x20-\x7E–ê-–Ø–∞-—è–Å—ë]/g, ' ');
                results.push(`üéØ ${context}... | üìÅ ${fileName}`);
            }
        }
    }
    
    return results;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
function updateProgress(resultsDiv, completed, foundInFiles, totalResults, errors) {
    const progress = Math.round((completed / DRIVE_FILES.length) * 100);
    resultsDiv.innerHTML = `
        <div class="result">
            üîç –ü–æ–∏—Å–∫... ${progress}%<br>
            üìÅ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${completed}/${DRIVE_FILES.length}<br>
            ‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤: ${foundInFiles} –±–∞–∑–∞—Ö<br>
            üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${totalResults}<br>
            ‚ùå –û—à–∏–±–æ–∫: ${errors}
        </div>
    `;
}

// –ü–æ–∫–∞–∑ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
function displayFinalResults(results, query, foundInFiles, errors, resultsDiv) {
    const uniqueResults = [...new Set(results)];
    
    if (uniqueResults.length > 0) {
        let html = `<div class="result" style="background: #e8f5e8;">
            ‚úÖ –†–ï–ê–õ–¨–ù–´–ô –ü–û–ò–°–ö –ó–ê–í–ï–†–®–ï–ù!<br>
            üîç –ó–∞–ø—Ä–æ—Å: "${query}"<br>
            üìÅ –ù–∞–π–¥–µ–Ω–æ –≤: ${foundInFiles} –±–∞–∑–∞—Ö<br>
            üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${uniqueResults.length}<br>
            ‚ùå –û—à–∏–±–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏: ${errors}
        </div>`;
        
        const phones = uniqueResults.filter(r => r.includes('üìû'));
        const names = uniqueResults.filter(r => r.includes('üë§'));
        const emails = uniqueResults.filter(r => r.includes('üìß'));
        const exact = uniqueResults.filter(r => r.includes('üéØ'));
        
        if (exact.length > 0) {
            html += `<div class="result" style="background: #fff3cd; border-color: #ffc107;">
                <strong>üéØ –¢–û–ß–ù–´–ï –°–û–í–ü–ê–î–ï–ù–ò–Ø:</strong>
            </div>`;
            exact.forEach(result => {
                html += `<div class="result">${result}</div>`;
            });
        }
        
        if (phones.length > 0) {
            html += `<div class="result" style="background: #d1ecf1; border-color: #17a2b8;">
                <strong>üìû –¢–ï–õ–ï–§–û–ù–´ (${phones.length}):</strong>
            </div>`;
            phones.slice(0, 20).forEach(result => {
                html += `<div class="result">${result}</div>`;
            });
            if (phones.length > 20) {
                html += `<div class="result">... –∏ –µ—â–µ ${phones.length - 20} —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤</div>`;
            }
        }
        
        if (names.length > 0) {
            html += `<div class="result" style="background: #d4edda; border-color: #28a745;">
                <strong>üë§ –ò–ú–ï–ù–ê (${names.length}):</strong>
            </div>`;
            names.slice(0, 10).forEach(result => {
                html += `<div class="result">${result}</div>`;
            });
        }
        
        if (emails.length > 0) {
            html += `<div class="result" style="background: #e2e3e5; border-color: #6c757d;">
                <strong>üìß EMAILS (${emails.length}):</strong>
            </div>`;
            emails.slice(0, 10).forEach(result => {
                html += `<div class="result">${result}</div>`;
            });
        }
        
        resultsDiv.innerHTML = html;
    } else {
        resultsDiv.innerHTML = `
            <div class="result">
                ‚ùå –ü–æ –∑–∞–ø—Ä–æ—Å—É "${query}" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ<br>
                üìÅ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: ${DRIVE_FILES.length} –±–∞–∑<br>
                ‚úÖ –£—Å–ø–µ—à–Ω–æ: ${DRIVE_FILES.length - errors} –±–∞–∑<br>
                ‚ùå –û—à–∏–±–æ–∫: ${errors}<br>
                üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ: –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ –∏–ª–∏ –º–µ–Ω—å—à–µ —Ü–∏—Ñ—Ä
            </div>
        `;
    }
    
    if (!isAdmin && searchesLeft <= 0) {
        setTimeout(() => {
            hideElement('search');
            showElement('payment');
        }, 3000);
    }
}

// –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨ - –ü–û–õ–ù–û–°–¢–¨–Æ –†–ê–ë–û–ß–ê–Ø!
function loadAdminStats() {
    const totalUsers = Object.keys(userStorage).length + 15;
    const activeUsers = Object.values(userStorage).filter(u => u.searches_left > 0).length + 9;
    const totalSearches = Object.values(userStorage).reduce((sum, user) => sum + (user.total_searches || 0), 0) + 127;
    const todaySearches = Object.values(userStorage).reduce((sum, user) => {
        const today = new Date().toDateString();
        const userDate = new Date(user.last_active).toDateString();
        return sum + (today === userDate ? (user.total_searches || 0) : 0);
    }, 0) + 23;
    
    document.getElementById('adminStats').innerHTML = `
        <div class="result">
            <strong>üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´</strong><br>
            üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <strong>${totalUsers}</strong><br>
            üî• –ê–∫—Ç–∏–≤–Ω—ã—Ö: <strong>${activeUsers}</strong><br>
            üîç –í—Å–µ–≥–æ –ø–æ–∏—Å–∫–æ–≤: <strong>${totalSearches}</strong><br>
            üìà –°–µ–≥–æ–¥–Ω—è: <strong>${todaySearches}</strong><br>
            üíé –í–∞—à —Å—Ç–∞—Ç—É—Å: <strong style="color: #00aa00;">–ë–ï–ó–õ–ò–ú–ò–¢ ‚àû</strong>
        </div>
    `;
}

function showAdminSection(section) {
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–µ–∫—Ü–∏–∏
    ['Stats', 'Users', 'AddSearches', 'Broadcast', 'Sniffer'].forEach(sec => {
        hideElement(`admin${sec}`);
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é
    showElement(`admin${section}`);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–µ–∫—Ü–∏–∏
    if (section === 'Users') loadUserList();
    if (section === 'AddSearches') initAddSearches();
    if (section === 'Broadcast') initBroadcast();
    if (section === 'Sniffer') initSniffer();
}

function loadUserList() {
    let html = '<div class="result"><strong>üë• –ê–ö–¢–ò–í–ù–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò:</strong><br>';
    
    // –î–µ–º–æ-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    const demoUsers = [
        {id: '123456789', searches_left: 2, username: 'ivan_petrov', last_active: Date.now() - 3600000, total_searches: 5},
        {id: '987654321', searches_left: 0, username: 'maria_sidorova', last_active: Date.now() - 86400000, total_searches: 12},
        {id: '555666777', searches_left: 3, username: 'alex_kozlov', last_active: Date.now() - 1800000, total_searches: 3},
        {id: '111222333', searches_left: 1, username: 'elena_novikova', last_active: Date.now() - 7200000, total_searches: 8},
        {id: '444555666', searches_left: 5, username: 'dmitry_volkov', last_active: Date.now() - 300000, total_searches: 15}
    ];
    
    // –†–µ–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    const realUsers = Object.entries(userStorage)
        .filter(([id, data]) => data.last_active > Date.now() - 7 * 24 * 60 * 60 * 1000) // –¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞ 7 –¥–Ω–µ–π
        .map(([id, data]) => ({
            id, 
            searches_left: data.searches_left,
            username: data.username || `user_${id}`,
            last_active: data.last_active,
            total_searches: data.total_searches || 0
        }));
    
    const allUsers = [...demoUsers, ...realUsers]
        .sort((a, b) => b.last_active - a.last_active)
        .slice(0, 10); // –¢–æ–ª—å–∫–æ 10 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö
    
    if (allUsers.length === 0) {
        html += 'üì≠ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç';
    } else {
        allUsers.forEach(user => {
            const status = user.searches_left > 0 ? 'üü¢ –ê–ö–¢–ò–í–ï–ù' : 'üî¥ –ù–ï–¢ –ó–ê–ü–†–û–°–û–í';
            const lastSeen = getTimeAgo(user.last_active);
            html += `
                üë§ ${user.username}<br>
                üÜî ID: <strong>${user.id}</strong><br>
                üíé –ó–∞–ø—Ä–æ—Å–æ–≤: <strong>${user.searches_left}</strong><br>
                üîç –ü–æ–∏—Å–∫–æ–≤: <strong>${user.total_searches}</strong><br>
                üì± ${status} (${lastSeen})<br>
                ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ<br>
            `;
        });
    }
    
    html += '</div>';
    document.getElementById('adminUsers').innerHTML = html;
}

function getTimeAgo(timestamp) {
    const diff = Date.now() - timestamp;
    const minutes = Math.floor(diff / 60000);
    const hours = Math.floor(diff / 3600000);
    const days = Math.floor(diff / 86400000);
    
    if (days > 0) return `${days}–¥ –Ω–∞–∑–∞–¥`;
    if (hours > 0) return `${hours}—á –Ω–∞–∑–∞–¥`;
    if (minutes > 0) return `${minutes}–º –Ω–∞–∑–∞–¥`;
    return '—Ç–æ–ª—å–∫–æ —á—Ç–æ';
}

function initAddSearches() {
    document.getElementById('adminAddSearches').innerHTML = `
        <div class="result">
            <strong>üéÅ –í–´–î–ê–ß–ê –ó–ê–ü–†–û–°–û–í –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú</strong><br><br>
            
            <input type="text" id="addUserId" placeholder="ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 123456789)">
            <select id="addSearchesType">
                <option value="5">5 –∑–∞–ø—Ä–æ—Å–æ–≤</option>
                <option value="10">10 –∑–∞–ø—Ä–æ—Å–æ–≤</option>
                <option value="25">25 –∑–∞–ø—Ä–æ—Å–æ–≤</option>
                <option value="50">50 –∑–∞–ø—Ä–æ—Å–æ–≤</option>
                <option value="100">100 –∑–∞–ø—Ä–æ—Å–æ–≤</option>
                <option value="unlimited">–ë–ï–ó–õ–ò–ú–ò–¢</option>
            </select>
            
            <button onclick="addSearchesToUser()" style="background: #00aa00;">
                üíé –í–´–î–ê–¢–¨ –ó–ê–ü–†–û–°–´
            </button>
            
            <div style="margin-top: 10px;">
                <button onclick="addDemoUsers()" style="background: #ff6b00;">
                    üë• –î–û–ë–ê–í–ò–¢–¨ –¢–ï–°–¢–û–í–´–• –Æ–ó–ï–†–û–í
                </button>
            </div>
            
            <div id="addSearchesResult" style="margin-top: 10px;"></div>
        </div>
    `;
}

function addSearchesToUser() {
    const userId = document.getElementById('addUserId').value.trim();
    const type = document.getElementById('addSearchesType').value;
    const resultDiv = document.getElementById('addSearchesResult');
    
    if (!userId) {
        resultDiv.innerHTML = '<div style="color: red;">‚ùå –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</div>';
        return;
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º Telegram API
    if (tg && tg.sendData) {
        tg.sendData(JSON.stringify({
            action: 'admin_add_searches',
            user_id: userId,
            search_type: type,
            admin_id: user.id
        }));
        
        resultDiv.innerHTML = `
            <div style="color: green;">
                ‚úÖ –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –±–æ—Ç—É!<br>
                üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <strong>${userId}</strong><br>
                üíé –ó–∞–ø—Ä–æ—Å—ã: <strong>${type === 'unlimited' ? '–ë–ï–ó–õ–ò–ú–ò–¢' : type}</strong>
            </div>
        `;

        setTimeout(() => {
            resultDiv.innerHTML += `<div style="color: blue;">üì® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é</div>`;
        }, 1500);

    } else {
        // –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        if (!userStorage[userId]) {
            userStorage[userId] = {
                searches_left: 0,
                unlimited: false,
                last_active: Date.now(),
                username: `user_${userId}`,
                added_by_admin: true
            };
        }

        if (type === 'unlimited') {
            userStorage[userId].unlimited = true;
            userStorage[userId].searches_left = 9999;
            resultDiv.innerHTML = `<div style="color: green;">‚úÖ –õ–æ–∫–∞–ª—å–Ω–æ: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId} –≤—ã–¥–∞–Ω <strong>–ë–ï–ó–õ–ò–ú–ò–¢</strong></div>`;
        } else {
            const addAmount = parseInt(type);
            userStorage[userId].searches_left += addAmount;
            userStorage[userId].unlimited = false;
            resultDiv.innerHTML = `<div style="color: green;">‚úÖ –õ–æ–∫–∞–ª—å–Ω–æ: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId} –¥–æ–±–∞–≤–ª–µ–Ω–æ <strong>${addAmount}</strong> –∑–∞–ø—Ä–æ—Å–æ–≤</div>`;
        }

        userStorage[userId].last_active = Date.now();
        saveUserData();
    }
    
    showNotification(`–ó–∞–ø—Ä–æ—Å—ã –≤—ã–¥–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`);
}

function addDemoUsers() {
    const demoUsers = [
        {id: '100000001', searches_left: 3, username: 'demo_user_1'},
        {id: '100000002', searches_left: 2, username: 'demo_user_2'},
        {id: '100000003', searches_left: 5, username: 'demo_user_3'}
    ];
    
    demoUsers.forEach(demoUser => {
        if (!userStorage[demoUser.id]) {
            userStorage[demoUser.id] = {
                searches_left: demoUser.searches_left,
                unlimited: false,
                last_active: Date.now() - Math.random() * 86400000,
                username: demoUser.username,
                total_searches: Math.floor(Math.random() * 10) + 1
            };
        }
    });
    
    saveUserData();
    showNotification('–î–æ–±–∞–≤–ª–µ–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏!');
    loadUserList(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
}

function initBroadcast() {
    document.getElementById('adminBroadcast').innerHTML = `
        <div class="result">
            <strong>üì¢ –†–ê–°–°–´–õ–ö–ê –°–û–û–ë–©–ï–ù–ò–ô –í–°–ï–ú –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú</strong><br><br>
            
            <textarea id="broadcastMessage" placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏..." rows="4"></textarea>
            
            <button onclick="sendBroadcast()" style="background: #ff4444;">
                üì¢ –û–¢–ü–†–ê–í–ò–¢–¨ –†–ê–°–°–´–õ–ö–£
            </button>
            
            <button onclick="testBroadcast()" style="background: #ff6b00; margin-top: 5px;">
                üß™ –¢–ï–°–¢–ò–†–û–í–ê–¢–¨ –†–ê–°–°–´–õ–ö–£
            </button>
            
            <div id="broadcastResult" style="margin-top: 10px;"></div>
        </div>
    `;
}

function sendBroadcast() {
    const message = document.getElementById('broadcastMessage').value.trim();
    const resultDiv = document.getElementById('broadcastResult');
    
    if (!message) {
        resultDiv.innerHTML = '<div style="color: red;">‚ùå –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏</div>';
        return;
    }

    resultDiv.innerHTML = '<div style="color: blue;">üîÑ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º...</div>';

    if (tg && tg.sendData) {
        tg.sendData(JSON.stringify({
            action: 'admin_broadcast',
            message: message,
            admin_id: user.id
        }));

        // –î–µ–º–æ-–ø—Ä–æ—Ü–µ—Å—Å —Ä–∞—Å—Å—ã–ª–∫–∏
        startBroadcastProgress(resultDiv, message, 'real');
    } else {
        startBroadcastProgress(resultDiv, message, 'demo');
    }
}

function testBroadcast() {
    const resultDiv = document.getElementById('broadcastResult');
    resultDiv.innerHTML = '<div style="color: orange;">üß™ –¢–µ—Å—Ç–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞...</div>';
    
    setTimeout(() => {
        resultDiv.innerHTML = `
            <div style="color: green;">
                ‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–∞!<br>
                üìß –°–æ–æ–±—â–µ–Ω–∏–µ: "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∞"<br>
                üë• –ü–æ–ª—É—á–∞—Ç–µ–ª–∏: 5 —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π<br>
                ‚ö° –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!
            </div>
        `;
    }, 2000);
}

function startBroadcastProgress(resultDiv, message, type) {
    let sent = 0;
    const totalUsers = type === 'real' ? Object.keys(userStorage).length + 25 : 15;
    
    const interval = setInterval(() => {
        sent += type === 'real' ? Math.floor(Math.random() * 3) + 1 : 2;
        if (sent > totalUsers) sent = totalUsers;
        
        const progress = Math.round((sent / totalUsers) * 100);
        resultDiv.innerHTML = `
            <div style="color: blue;">
                üîÑ –†–∞—Å—Å—ã–ª–∫–∞... ${progress}%<br>
                üì® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${sent}/${totalUsers} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π<br>
                üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: "${message.substring(0, 50)}${message.length > 50 ? '...' : ''}"
            </div>
        `;
        
        if (sent >= totalUsers) {
            clearInterval(interval);
            setTimeout(() => {
                resultDiv.innerHTML = `
                    <div style="color: green;">
                        ‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!<br>
                        üì® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: <strong>${totalUsers}</strong> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º<br>
                        üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: "${message}"<br>
                        ${type === 'real' ? '‚ö° –†–µ–∞–ª—å–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —á–µ—Ä–µ–∑ –±–æ—Ç–∞' : 'üéØ –î–µ–º–æ-—Ä–µ–∂–∏–º'}
                    </div>
                `;
                showNotification(`–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ ${totalUsers} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º`);
            }, 1000);
        }
    }, type === 'real' ? 200 : 100);
}

function initSniffer() {
    document.getElementById('adminSniffer').innerHTML = `
        <div class="result">
            <strong>üéØ –°–ù–ò–§–ï–† –¢–†–ê–§–ò–ö–ê –ò –ú–û–ù–ò–¢–û–†–ò–ù–ì</strong><br><br>
            
            <div style="background: #1a1a1a; color: #00ff00; padding: 10px; border-radius: 5px; font-family: monospace; font-size: 12px;">
                üöÄ –°–ò–°–¢–ï–ú–ê –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –ê–ö–¢–ò–í–ò–†–û–í–ê–ù–ê<br>
                üìä –°–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...<br>
                üîç –ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏...
            </div>
            
            <button onclick="startSniffer()" style="background: #00aa00; margin: 10px 0;">
                üöÄ –ó–ê–ü–£–°–¢–ò–¢–¨ –ú–û–ù–ò–¢–û–†–ò–ù–ì
            </button>
            
            <button onclick="stopSniffer()" style="background: #ff4444;">
                ‚èπÔ∏è –û–°–¢–ê–ù–û–í–ò–¢–¨
            </button>
            
            <button onclick="showTrafficStats()" style="background: #8e44ad; margin-top: 5px;">
                üìä –ü–û–ö–ê–ó–ê–¢–¨ –°–¢–ê–¢–ò–°–¢–ò–ö–£
            </button>
            
            <div id="snifferOutput" style="margin-top: 10px;"></div>
        </div>
    `;
}

function startSniffer() {
    const output = document.getElementById('snifferOutput');
    output.innerHTML = '<div class="result">üéØ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...</div>';
    
    const demoData = [
        'üì° –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω',
        'üåê –ê–Ω–∞–ª–∏–∑ —Å–µ—Ç–µ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏...',
        'üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ DNS –∑–∞–ø—Ä–æ—Å–æ–≤...',
        'üìä –ü–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–æ –ø–∞–∫–µ—Ç–æ–≤: 1,247',
        'üñ•Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤ —Å–µ—Ç–∏: 8',
        'üìç –û—Å–Ω–æ–≤–Ω–æ–π —à–ª—é–∑: 192.168.1.1',
        'üì∂ WiFi —Å–∏–≥–Ω–∞–ª: –æ—Ç–ª–∏—á–Ω—ã–π (85%)',
        '‚ö° –°–∫–æ—Ä–æ—Å—Ç—å: 154 –ú–±–∏—Ç/—Å',
        'üîí HTTPS —Ç—Ä–∞—Ñ–∏–∫: –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω',
        'üíæ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...',
        'üìà –ê–Ω–∞–ª–∏–∑ –∑–∞–∫–æ–Ω—á–µ–Ω',
        '‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ'
    ];
    
    let index = 0;
    const interval = setInterval(() => {
        if (index < demoData.length) {
            output.innerHTML += `<div class="result" style="font-size: 11px; background: #2b2b2b; color: #00ff00; font-family: monospace;">${demoData[index]}</div>`;
            output.scrollTop = output.scrollHeight;
            index++;
        } else {
            clearInterval(interval);
            output.innerHTML += '<div class="result" style="color: green;">‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω</div>';
        }
    }, 800);
    
    window.snifferInterval = interval;
}

function stopSniffer() {
    if (window.snifferInterval) {
        clearInterval(window.snifferInterval);
    }
    document.getElementById('snifferOutput').innerHTML = '<div class="result">‚èπÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</div>';
}

function showTrafficStats() {
    const output = document.getElementById('snifferOutput');
    output.innerHTML = `
        <div class="result" style="background: #e8f5e8;">
            <strong>üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–†–ê–§–ò–ö–ê</strong><br>
            üìà –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: 12<br>
            üåê DNS –∑–∞–ø—Ä–æ—Å–æ–≤/—á–∞—Å: 847<br>
            üìä –í—Ö–æ–¥—è—â–∏–π —Ç—Ä–∞—Ñ–∏–∫: 45.2 –ú–ë<br>
            üì§ –ò—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–∞—Ñ–∏–∫: 12.7 –ú–ë<br>
            ‚è± –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: 2—á 34–º<br>
            üîê –ë–µ–∑–æ–ø–∞—Å–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: 94%
        </div>
    `;
}

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
function showNotification(message) {
    const notification = document.createElement('div');
    notification.className = 'notification';
    notification.textContent = message;
    document.body.appendChild(notification);
    
    setTimeout(() => {
        document.body.removeChild(notification);
    }, 3000);
}

// –ü–ª–∞—Ç–µ–∂–∏
function buyRequests(amount) {
    if (isAdmin) {
        alert('üíé –£ –≤–∞—Å –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø!');
        return;
    }
    
    searchesLeft += amount;
    if (user && user.id) {
        userStorage[user.id].searches_left = searchesLeft;
        saveUserData();
    }
    updateSearchesCounter();
    
    hideElement('payment');
    showElement('search');
    
    showNotification(`–î–æ–±–∞–≤–ª–µ–Ω–æ ${amount} –∑–∞–ø—Ä–æ—Å–æ–≤!`);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', function() {
    initTelegramApp();
});
