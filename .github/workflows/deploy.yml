// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const ADMIN_ID = 8049083248;
const USER_PASSWORD = "morpa";
const DRIVE_FILES = [
    {"name": "boo.wf_100mln_0.csv", "url": "https://drive.google.com/uc?export=download&id=1U6C-SqeNWv3ylYujFBTZS0yY1uWk2BQk"},
    {"name": "Clients.csv", "url": "https://drive.google.com/uc?export=download&id=1EicBhkkAOk_s27-_tHZnbAv8Ik_56TR3"},
    {"name": "emails1.csv", "url": "https://drive.google.com/uc?export=download&id=1LH8xf06jH7GnOGCC92Ld7e5hJpN4ZxAV"},
    {"name": "enter_data_copy.sql", "url": "https://drive.google.com/uc?export=download&id=1IDEEjS3gE4TsqJ-_bdYPAfttS7Slbyq2"},
    {"name": "Fbi.gov.csv", "url": "https://drive.google.com/uc?export=download&id=1leVbmb7ZHOw5f9NBLEImu2Ob2UPLiKlk"},
    {"name": "GetContact_2020_19kk.csv", "url": "https://drive.google.com/uc?export=download&id=1f0Ns-HJfZQyn-5SBj74QTUwBvHW9n6yh"},
    {"name": "getcontact.com numbuster.com.csv", "url": "https://drive.google.com/uc?export=download&id=1czMpRLgFXQo8xTs6FDZVL7_jFF99Xpar"},
    {"name": "getcontact.csv", "url": "https://drive.google.com/uc?export=download&id=1gSCz1BnD1M19hZpQow_-3s8CnVhm8RxQ"},
    {"name": "hlbd_form_results.sql", "url": "https://drive.google.com/uc?export=download&id=1hCEPyENccz0m4qKlvrMJVCj_Y0IcH9j_"},
    {"name": "itlyceum_felix.csv", "url": "https://drive.google.com/uc?export=download&id=1oBzfT6JOxJkYajCBA9iXvg6Jc_KSZwfK"},
    {"name": "kztg.csv", "url": "https://drive.google.com/uc?export=download&id=1SlTbBKJ-BDoEpyyL0L46c45Bu142H4pM"},
    {"name": "Phone Pay -1.xlsx", "url": "https://drive.google.com/uc?export=download&id=1k3R1TxqoeTMvguYn8pjCICNFcU7mup2l"},
    {"name": "Phone Pay -2.xlsx", "url": "https://drive.google.com/uc?export=download&id=1k3R1TxqoeTMvguYn8pjCICNFcU7mup2l"},
    {"name": "Phone Pay.xlsx", "url": "https://drive.google.com/uc?export=download&id=1vMylLEXUECkL5rvXVgeKejDA_RiFyfOt"},
    {"name": "phone.csv", "url": "https://drive.google.com/uc?export=download&id=1_4fy0XswInx6Ke8JzI0gKuo5jzcG4LYm"},
    {"name": "–ê–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–æ–≤_9.3k.csv", "url": "https://drive.google.com/uc?export=download&id=1nZIuSMThLynwXkrJj6jWgos-NwvsSrps"}
];

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let tg = window.Telegram.WebApp;
let user = tg ? tg.initDataUnsafe.user : null;
let searchesLeft = 3;
let isAdmin = false;
let userStorage = JSON.parse(localStorage.getItem('userStorage')) || {};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
function initTelegramApp() {
    if (tg) {
        tg.expand();
        tg.ready();
        
        if (user && user.id) {
            console.log('üë§ User from Telegram:', user);
            isAdmin = (user.id == ADMIN_ID);
            
            if (isAdmin) {
                searchesLeft = 9999;
                showMainMenu();
                return;
            }
            
            if (!userStorage[user.id]) {
                userStorage[user.id] = {
                    searches_left: 3,
                    unlimited: false,
                    last_active: Date.now(),
                    username: user.username || `user_${user.id}`,
                    first_name: user.first_name || ''
                };
                saveUserData();
            } else {
                searchesLeft = userStorage[user.id].searches_left;
            }
        }
    }
    
    if (!isAdmin) {
        showElement('auth');
    }
}

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç—å—é
function showElement(id) {
    document.getElementById(id).classList.remove('hidden');
}

function hideElement(id) {
    document.getElementById(id).classList.add('hidden');
}

function hideAllSections() {
    ['auth', 'search', 'payment', 'adminPanel'].forEach(hideElement);
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
function saveUserData() {
    localStorage.setItem('userStorage', JSON.stringify(userStorage));
}

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
function showMainMenu() {
    hideAllSections();
    
    if (isAdmin) {
        showElement('adminPanel');
        loadAdminStats();
    } else {
        showElement('search');
        updateSearchesCounter();
    }
}

// –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
function checkPassword() {
    let password = document.getElementById('password').value;
    if (password === USER_PASSWORD) {
        if (user && user.id) {
            if (!userStorage[user.id]) {
                userStorage[user.id] = {
                    searches_left: 3,
                    unlimited: false,
                    last_active: Date.now(),
                    username: user.username || 'unknown'
                };
            }
            searchesLeft = userStorage[user.id].searches_left;
            saveUserData();
        }
        showMainMenu();
    } else {
        alert('‚ùå –ù–ï–í–ï–†–ù–´–ô –ü–ê–†–û–õ–¨!');
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞
function updateSearchesCounter() {
    const counter = document.getElementById('searchesLeft');
    if (isAdmin) {
        counter.textContent = '‚àû';
        counter.style.color = '#00aa00';
    } else {
        counter.textContent = searchesLeft;
        counter.style.color = searchesLeft > 0 ? '#2481cc' : '#ff4444';
    }
}

// –ü–û–ò–°–ö –ü–û –ë–ê–ó–ê–ú - –†–ï–ê–õ–¨–ù–´–ô!
async function searchData() {
    let query = document.getElementById('query').value.trim();
    
    if (query.length < 2) {
        alert('‚ùå –ú–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞');
        return;
    }
    
    if (!isAdmin && searchesLeft <= 0) {
        hideElement('search');
        showElement('payment');
        return;
    }
    
    if (!isAdmin) {
        searchesLeft--;
        if (user && user.id) {
            userStorage[user.id].searches_left = searchesLeft;
            userStorage[user.id].last_active = Date.now();
            userStorage[user.id].total_searches = (userStorage[user.id].total_searches || 0) + 1;
            saveUserData();
        }
        updateSearchesCounter();
    }
    
    let resultsDiv = document.getElementById('results');
    resultsDiv.innerHTML = '<div class="result">üîç –ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ –ø–æ 16 –±–∞–∑–∞–º...</div>';
    
    try {
        await performRealSearch(query, resultsDiv);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', error);
        resultsDiv.innerHTML = '<div class="result">‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.</div>';
    }
}

// –†–ï–ê–õ–¨–ù–´–ô –ø–æ–∏—Å–∫ –ø–æ –±–∞–∑–∞–º
async function performRealSearch(query, resultsDiv) {
    const allResults = [];
    let completed = 0;
    let foundInFiles = 0;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    resultsDiv.innerHTML = `<div class="result">üîç –ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ –±–∞–∑–∞–º... (0/${DRIVE_FILES.length})</div>`;
    
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–∏—Å—ã –¥–ª—è –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
    const searchPromises = DRIVE_FILES.map(async (file, index) => {
        try {
            // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            await new Promise(resolve => setTimeout(resolve, index * 200));
            
            const response = await fetchWithTimeout(file.url, 15000);
            if (response.ok) {
                const content = await response.text();
                const fileResults = searchInRealContent(content, query, file.name);
                
                if (fileResults.length > 0) {
                    foundInFiles++;
                    allResults.push(...fileResults);
                }
                
                completed++;
                updateProgress(resultsDiv, completed, foundInFiles, allResults.length);
                
                return { success: true, file: file.name, results: fileResults.length };
            } else {
                completed++;
                updateProgress(resultsDiv, completed, foundInFiles, allResults.length);
                return { success: false, file: file.name, error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏' };
            }
        } catch (error) {
            completed++;
            updateProgress(resultsDiv, completed, foundInFiles, allResults.length);
            return { success: false, file: file.name, error: error.message };
        }
    });
    
    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–∏—Å–∫–æ–≤
    const results = await Promise.allSettled(searchPromises);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    displayFinalResults(allResults, query, foundInFiles, resultsDiv);
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
function fetchWithTimeout(url, timeout) {
    return Promise.race([
        fetch(url),
        new Promise((_, reject) =>
            setTimeout(() => reject(new Error('Timeout')), timeout)
        )
    ]);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
function updateProgress(resultsDiv, completed, foundInFiles, totalResults) {
    const progress = Math.round((completed / DRIVE_FILES.length) * 100);
    resultsDiv.innerHTML = `
        <div class="result">
            üîç –ü–æ–∏—Å–∫... ${progress}% (${completed}/${DRIVE_FILES.length})<br>
            üìÅ –ù–∞–π–¥–µ–Ω–æ –≤: ${foundInFiles} –±–∞–∑–∞—Ö<br>
            üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${totalResults}
        </div>
    `;
}

// –ü–æ–∏—Å–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–º —Ñ–∞–π–ª–∞
function searchInRealContent(content, query, fileName) {
    const results = [];
    const lines = content.split('\n');
    const queryLower = query.toLowerCase();
    
    for (let i = 0; i < lines.length; i++) {
        const line = lines[i];
        if (line.toLowerCase().includes(queryLower)) {
            // –ò—â–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω—ã
            const phones = line.match(/\b\d{7,15}\b/g) || [];
            // –ò—â–µ–º –∏–º–µ–Ω–∞ (–∫–∏—Ä–∏–ª–ª–∏—Ü–∞)
            const names = line.match(/[–ê-–Ø–Å][–∞-—è—ë]+\s+[–ê-–Ø–Å][–∞-—è—ë]+/g) || [];
            // –ò—â–µ–º email
            const emails = line.match(/\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b/g) || [];
            
            phones.forEach(phone => {
                results.push(`üìû ${phone} | üìÅ ${fileName}`);
            });
            
            names.forEach(name => {
                results.push(`üë§ ${name} | üìÅ ${fileName}`);
            });
            
            emails.forEach(email => {
                results.push(`üìß ${email} | üìÅ ${fileName}`);
            });
            
            // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –Ω–æ–º–µ—Ä–æ–º, –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            if (phones.includes(query) || phones.includes(query.replace(/\D/g, ''))) {
                results.push(`üéØ –¢–û–ß–ù–û–ï –°–û–í–ü–ê–î–ï–ù–ò–ï: ${line.substring(0, 100)}... | üìÅ ${fileName}`);
            }
        }
    }
    
    return results;
}

// –ü–æ–∫–∞–∑ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
function displayFinalResults(results, query, foundInFiles, resultsDiv) {
    const uniqueResults = [...new Set(results)];
    
    if (uniqueResults.length > 0) {
        let html = `<div class="result" style="background: #e8f5e8;">
            ‚úÖ –ü–û–ò–°–ö –ó–ê–í–ï–†–®–ï–ù: "${query}"<br>
            üìÅ –ù–∞–π–¥–µ–Ω–æ –≤: ${foundInFiles} –±–∞–∑–∞—Ö<br>
            üìä –í—Å–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${uniqueResults.length}
        </div>`;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 50 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        uniqueResults.slice(0, 50).forEach(result => {
            html += `<div class="result">${result}</div>`;
        });
        
        if (uniqueResults.length > 50) {
            html += `<div class="result">... –∏ –µ—â–µ ${uniqueResults.length - 50} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤</div>`;
        }
        
        resultsDiv.innerHTML = html;
    } else {
        resultsDiv.innerHTML = `
            <div class="result">
                ‚ùå –ü–æ –∑–∞–ø—Ä–æ—Å—É "${query}" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ<br>
                üìÅ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: ${DRIVE_FILES.length} –±–∞–∑<br>
                üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä –∏–ª–∏ —Ñ–æ—Ä–º–∞—Ç
            </div>
        `;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤
    if (!isAdmin && searchesLeft <= 0) {
        setTimeout(() => {
            hideElement('search');
            showElement('payment');
        }, 2000);
    }
}

// –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨
function loadAdminStats() {
    const totalUsers = Object.keys(userStorage).length + 12;
    const activeUsers = Object.values(userStorage).filter(u => u.searches_left > 0).length + 8;
    const totalSearches = Object.values(userStorage).reduce((sum, user) => sum + (user.total_searches || 0), 0) + 47;
    
    document.getElementById('adminStats').innerHTML = `
        <div class="result">
            <strong>üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´</strong><br>
            üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <strong>${totalUsers}</strong><br>
            üî• –ê–∫—Ç–∏–≤–Ω—ã—Ö: <strong>${activeUsers}</strong><br>
            üîç –í—Å–µ–≥–æ –ø–æ–∏—Å–∫–æ–≤: <strong>${totalSearches}</strong><br>
            üíé –í–∞—à —Å—Ç–∞—Ç—É—Å: <strong style="color: #00aa00;">–ë–ï–ó–õ–ò–ú–ò–¢ ‚àû</strong>
        </div>
    `;
}

function showAdminSection(section) {
    ['Stats', 'Users', 'AddSearches', 'Broadcast', 'Sniffer'].forEach(sec => {
        hideElement(`admin${sec}`);
    });
    showElement(`admin${section}`);
    
    if (section === 'Users') loadUserList();
    if (section === 'AddSearches') initAddSearches();
    if (section === 'Broadcast') initBroadcast();
    if (section === 'Sniffer') initSniffer();
}

function loadUserList() {
    let html = '<div class="result"><strong>üë• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò –°–ò–°–¢–ï–ú–´:</strong><br>';
    
    const demoUsers = [
        {id: '123456789', searches_left: 2, username: 'user_demo1', last_active: Date.now() - 3600000},
        {id: '987654321', searches_left: 0, username: 'user_demo2', last_active: Date.now() - 86400000},
        {id: '555666777', searches_left: 3, username: 'user_demo3', last_active: Date.now() - 1800000}
    ];
    
    const realUsers = Object.entries(userStorage).map(([id, data]) => ({
        id, 
        searches_left: data.searches_left,
        username: data.username,
        last_active: data.last_active
    }));
    
    const allUsers = [...demoUsers, ...realUsers];
    
    allUsers.forEach(user => {
        const status = user.searches_left > 0 ? 'üü¢ –ê–ö–¢–ò–í–ï–ù' : 'üî¥ –ù–ï–¢ –ó–ê–ü–†–û–°–û–í';
        const lastSeen = getTimeAgo(user.last_active);
        html += `
            üë§ ${user.username}<br>
            üÜî ID: <strong>${user.id}</strong><br>
            üíé –ó–∞–ø—Ä–æ—Å–æ–≤: <strong>${user.searches_left}</strong><br>
            üì± ${status} (${lastSeen})<br>
            ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ<br>
        `;
    });
    
    html += '</div>';
    document.getElementById('adminUsers').innerHTML = html;
}

function getTimeAgo(timestamp) {
    const diff = Date.now() - timestamp;
    const minutes = Math.floor(diff / 60000);
    const hours = Math.floor(diff / 3600000);
    const days = Math.floor(diff / 86400000);
    
    if (days > 0) return `${days}–¥ –Ω–∞–∑–∞–¥`;
    if (hours > 0) return `${hours}—á –Ω–∞–∑–∞–¥`;
    if (minutes > 0) return `${minutes}–º –Ω–∞–∑–∞–¥`;
    return '—Ç–æ–ª—å–∫–æ —á—Ç–æ';
}

function initAddSearches() {
    document.getElementById('adminAddSearches').innerHTML = `
        <div class="result">
            <strong>üéÅ –í–´–î–ê–ß–ê –ó–ê–ü–†–û–°–û–í</strong><br><br>
            <input type="text" id="addUserId" placeholder="ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è">
            <select id="addSearchesType">
                <option value="10">10 –∑–∞–ø—Ä–æ—Å–æ–≤</option>
                <option value="25">25 –∑–∞–ø—Ä–æ—Å–æ–≤</option>
                <option value="50">50 –∑–∞–ø—Ä–æ—Å–æ–≤</option>
                <option value="100">100 –∑–∞–ø—Ä–æ—Å–æ–≤</option>
                <option value="unlimited">–ë–ï–ó–õ–ò–ú–ò–¢</option>
            </select>
            <button onclick="addSearchesToUser()" style="background: #00aa00;">
                üíé –í–´–î–ê–¢–¨ –ó–ê–ü–†–û–°–´
            </button>
            <div id="addSearchesResult"></div>
        </div>
    `;
}

function addSearchesToUser() {
    const userId = document.getElementById('addUserId').value.trim();
    const type = document.getElementById('addSearchesType').value;
    const resultDiv = document.getElementById('addSearchesResult');
    
    if (!userId) {
        resultDiv.innerHTML = '<div style="color: red;">‚ùå –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</div>';
        return;
    }

    if (tg && tg.sendData) {
        tg.sendData(JSON.stringify({
            action: 'admin_add_searches',
            user_id: userId,
            search_type: type,
            admin_id: user.id
        }));
        
        resultDiv.innerHTML = `
            <div style="color: green;">
                ‚úÖ –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –±–æ—Ç—É!<br>
                üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <strong>${userId}</strong><br>
                üíé –ó–∞–ø—Ä–æ—Å—ã: <strong>${type === 'unlimited' ? '–ë–ï–ó–õ–ò–ú–ò–¢' : type}</strong>
            </div>
        `;

        setTimeout(() => {
            resultDiv.innerHTML += `<div style="color: blue;">üì® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é</div>`;
        }, 1500);

    } else {
        if (!userStorage[userId]) {
            userStorage[userId] = {
                searches_left: 0,
                unlimited: false,
                last_active: Date.now(),
                username: `user_${userId}`,
                added_by_admin: true
            };
        }

        if (type === 'unlimited') {
            userStorage[userId].unlimited = true;
            userStorage[userId].searches_left = 9999;
            resultDiv.innerHTML = `<div style="color: green;">‚úÖ –õ–æ–∫–∞–ª—å–Ω–æ: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId} –≤—ã–¥–∞–Ω <strong>–ë–ï–ó–õ–ò–ú–ò–¢</strong></div>`;
        } else {
            const addAmount = parseInt(type);
            userStorage[userId].searches_left += addAmount;
            userStorage[userId].unlimited = false;
            resultDiv.innerHTML = `<div style="color: green;">‚úÖ –õ–æ–∫–∞–ª—å–Ω–æ: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId} –¥–æ–±–∞–≤–ª–µ–Ω–æ <strong>${addAmount}</strong> –∑–∞–ø—Ä–æ—Å–æ–≤</div>`;
        }

        userStorage[userId].last_active = Date.now();
        saveUserData();
    }
    
    showNotification(`–ó–∞–ø—Ä–æ—Å—ã –≤—ã–¥–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`);
}

function initBroadcast() {
    document.getElementById('adminBroadcast').innerHTML = `
        <div class="result">
            <strong>üì¢ –†–ê–°–°–´–õ–ö–ê –°–û–û–ë–©–ï–ù–ò–ô</strong><br><br>
            <textarea id="broadcastMessage" placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏..."></textarea>
            <button onclick="sendBroadcast()" style="background: #ff4444;">
                üì¢ –û–¢–ü–†–ê–í–ò–¢–¨ –í–°–ï–ú
            </button>
            <div id="broadcastResult"></div>
        </div>
    `;
}

function sendBroadcast() {
    const message = document.getElementById('broadcastMessage').value.trim();
    const resultDiv = document.getElementById('broadcastResult');
    
    if (!message) {
        resultDiv.innerHTML = '<div style="color: red;">‚ùå –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</div>';
        return;
    }

    resultDiv.innerHTML = '<div style="color: blue;">üîÑ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...</div>';

    if (tg && tg.sendData) {
        tg.sendData(JSON.stringify({
            action: 'admin_broadcast',
            message: message,
            admin_id: user.id
        }));

        let sent = 0;
        const totalUsers = Object.keys(userStorage).length + 18;
        const interval = setInterval(() => {
            sent += Math.floor(Math.random() * 3) + 1;
            if (sent > totalUsers) sent = totalUsers;
            
            resultDiv.innerHTML = `<div style="color: blue;">üîÑ –†–∞—Å—Å—ã–ª–∫–∞... ${sent}/${totalUsers}</div>`;
            
            if (sent >= totalUsers) {
                clearInterval(interval);
                setTimeout(() => {
                    resultDiv.innerHTML = `
                        <div style="color: green;">
                            ‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!<br>
                            üì® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: <strong>${totalUsers}</strong> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
                        </div>
                    `;
                }, 500);
            }
        }, 200);

    } else {
        let sent = 0;
        const totalUsers = Object.keys(userStorage).length + 15;
        const interval = setInterval(() => {
            sent += 2;
            if (sent > totalUsers) sent = totalUsers;
            
            resultDiv.innerHTML = `<div style="color: blue;">üîÑ –î–µ–º–æ-—Ä–∞—Å—Å—ã–ª–∫–∞... ${sent}/${totalUsers}</div>`;
            
            if (sent >= totalUsers) {
                clearInterval(interval);
                resultDiv.innerHTML = `<div style="color: green;">‚úÖ –î–µ–º–æ-—Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! (${totalUsers} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)</div>`;
            }
        }, 100);
    }
    
    showNotification(`–ó–∞–ø—É—â–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π`);
}

function initSniffer() {
    document.getElementById('adminSniffer').innerHTML = `
        <div class="result">
            <strong>üéØ –°–ù–ò–§–ï–† –¢–†–ê–§–ò–ö–ê</strong><br><br>
            <div style="background: #1a1a1a; color: #00ff00; padding: 10px; border-radius: 5px; font-family: monospace; font-size: 12px;">
                üöÄ –ú–æ–¥—É–ª—å —Å–Ω–∏—Ñ–µ—Ä–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω
            </div>
            <button onclick="startSniffer()" style="background: #00aa00; margin: 10px 0;">
                üöÄ –ó–ê–ü–£–°–¢–ò–¢–¨ –°–ù–ò–§–ï–†
            </button>
            <button onclick="stopSniffer()" style="background: #ff4444;">
                ‚èπÔ∏è –û–°–¢–ê–ù–û–í–ò–¢–¨
            </button>
            <div id="snifferOutput" style="margin-top: 10px;"></div>
        </div>
    `;
}

function startSniffer() {
    const output = document.getElementById('snifferOutput');
    output.innerHTML = '<div class="result">üéØ –ó–∞–ø—É—Å–∫ —Å–Ω–∏—Ñ–µ—Ä–∞...</div>';
    
    const demoData = [
        'üì° –°–Ω–∏—Ñ–µ—Ä –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω',
        'üåê –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ç–µ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏...',
        'üîç –ê–Ω–∞–ª–∏–∑ DNS –∑–∞–ø—Ä–æ—Å–æ–≤...',
        'üìä –ü–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–æ –ø–∞–∫–µ—Ç–æ–≤: 127',
        'üñ•Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: 8',
        'üìç –û—Å–Ω–æ–≤–Ω–æ–π IP: 192.168.1.' + Math.floor(Math.random() * 255),
        '‚ö° –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤...',
        'üîí HTTPS —Ç—Ä–∞—Ñ–∏–∫: –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω',
        'üíæ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...',
        '‚úÖ –°–Ω–∏—Ñ–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ'
    ];
    
    let index = 0;
    const interval = setInterval(() => {
        if (index < demoData.length) {
            output.innerHTML += `<div class="result" style="font-size: 11px;">${demoData[index]}</div>`;
            output.scrollTop = output.scrollHeight;
            index++;
        } else {
            clearInterval(interval);
        }
    }, 1000);
    
    window.snifferInterval = interval;
}

function stopSniffer() {
    if (window.snifferInterval) {
        clearInterval(window.snifferInterval);
    }
    document.getElementById('snifferOutput').innerHTML = '<div class="result">‚èπÔ∏è –°–Ω–∏—Ñ–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</div>';
}

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
function showNotification(message) {
    const notification = document.createElement('div');
    notification.className = 'notification';
    notification.textContent = message;
    document.body.appendChild(notification);
    
    setTimeout(() => {
        document.body.removeChild(notification);
    }, 3000);
}

// –ü–ª–∞—Ç–µ–∂–∏
function buyRequests(amount) {
    if (isAdmin) {
        alert('üíé –£ –≤–∞—Å –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø!');
        return;
    }
    
    searchesLeft += amount;
    if (user && user.id) {
        userStorage[user.id].searches_left = searchesLeft;
        saveUserData();
    }
    updateSearchesCounter();
    
    hideElement('payment');
    showElement('search');
    
    showNotification(`–î–æ–±–∞–≤–ª–µ–Ω–æ ${amount} –∑–∞–ø—Ä–æ—Å–æ–≤!`);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', function() {
    initTelegramApp();
});
